name: CI

on:
  push:
    branches:
      - v1.x
      - v1.25
  pull_request:
    branches:
      - v1.x
      - v1.25

defaults:
  run:
    shell: bash

jobs:
  commit-msg:
    name: Commit message check
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 100
    - name: Check commit messages
      run: |
        if git log --oneline | tail -n +2 | head -n 100 | cut -d ' ' -f2- | grep -q '.\{73\}'; then
          (echo -n "::error::";
           echo "Some commit message summary lines are too long. See CONTRIBUTING.md for more information.";
           echo "Invalid commits:";
           echo;
           git log --oneline | tail -n +2 | head -n 100 | cut -d ' ' -f2- | grep '.\{73\}';) | tr '\n' '\001' | sed -e 's#\x01#%0A#g';
          #exit 1;
        fi
  clang-format:
    name: Code formatting check
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 5
    - name: Add LLVM apt repository
      run: |
        wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository -y 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.8 main'
        sudo apt-get update
        curl -LO http://archive.ubuntu.com/ubuntu/pool/main/libf/libffi/libffi6_3.2.1-8_amd64.deb
        sudo dpkg -i libffi6_3.2.1-8_amd64.deb
    - name: Install clang-format-3.8
      run: |
        sudo apt-get install -y clang-format-3.8
    - name: Run clang-format-3.8
      run: |
        . ./util/clang_format_all.sh
        git clean -f
    - name: Check formatting
      run: |
        git diff --quiet || (
          (echo -n "::error::";
          echo "clang-format issues were found. See CONTRIBUTING.md for more information.";
          echo;
          git diff;) | tr '\n' '\001' | sed -e 's#\x01#%0A#g';
          exit 1;
        )
  cmake-minimum:
    name: Baseline cmake check
    needs: [commit-msg, clang-format]
    runs-on: ubuntu-20.04
    env:
      QT_SELECT: qt5
    strategy:
      fail-fast: true
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 5
    - name: Download minimum supported cmake version
      run: |
        pushd /tmp
        wget https://cmake.org/files/v2.8/cmake-2.8.12.2-Linux-i386.tar.gz
        tar -zxvf cmake-2.8.12.2-Linux-i386.tar.gz
        popd
    - name: Install compilation dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev mesa-common-dev libgl1-mesa-dev qtbase5-dev libxcb-keysyms1-dev
    - name: Configure renderdoc with cmake
      run: |
        mkdir build
        cd build
        /tmp/cmake-2.8.12.2-Linux-i386/bin/cmake -DCMAKE_BUILD_TYPE=Debug ..
    - name: Install compilation dependencies
      run: |
        sudo apt-get install -y libx11-dev mesa-common-dev libgl1-mesa-dev qtbase5-dev libqt5svg5-dev libqt5x11extras5-dev libxcb-keysyms1-dev libx11-xcb-dev clang++-3.8 g++-5
    - name: Build
      run: |
        mkdir build
        pushd build
        CC=${{ matrix.cc }} CXX=${{ matrix.cxx }} cmake -DCMAKE_BUILD_TYPE=${{ matrix.type }} ..
        make -j2
        popd
    - if: matrix.type == 'Debug'
      name: Run core unit tests
      run: |
        if ! ./build/bin/renderdoccmd test unit -o test.log; then
          echo "::error::$(cat test.log)" | tr '\n' '\001' | sed -e 's#\x01#%0A#g';
          exit 1;
        fi
    - if: matrix.type == 'Debug'
      name: Run UI unit tests
      run: |
        if ! ./build/bin/qrenderdoc --unittest log=test.log; then
          echo "::error::$(cat test.log)" | tr '\n' '\001' | sed -e 's#\x01#%0A#g';
          exit 1;
        fi
  
  macOS:
    name: Mac
    needs: [commit-msg, clang-format]
    runs-on: macos-11
    strategy:
      fail-fast: false
      matrix:
        name: [ Release ] #Development, 
        include:
          #- name: Development
          #  type: Debug
          - name: Release
            type: Release
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10.12
      uses: actions/setup-python@v4
      with:
        # Semantic version range syntax or exact version of a Python version
        python-version: '3.10.12'

    # You can test your matrix by printing the current Python version
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"
    - name: Install Homebrew dependencies
      run: |
        brew update || true
        brew unlink python
        brew link --overwrite --force python
        brew unlink python@3.10
        brew link --overwrite --force python@3.10
        #brew unlink python@3.11
        #brew link --overwrite --force python@3.11
        brew install --overwrite lftp automake pcre qt5
        brew link --overwrite --force qt5
        
    - name: Build
      run: |
        python -c "import sys; print(sys.version)"
        mkdir build
        pushd build
        cmake -DENABLE_METAL=On -DCMAKE_BUILD_TYPE=${{ matrix.type }} ..
        make -j2
        popd
    - if: matrix.type == 'Debug'
      name: Run core unit tests
      run: |
        if ! ./build/bin/renderdoccmd test unit -o test.log; then
          echo "::error::$(cat test.log)" | tr '\n' '\001' | sed -e $'s#\x01#%0A#g';
          exit 1;
        fi
    - if: matrix.type == 'Debug'
      name: Run UI unit tests
      run: |
        if ! ./build/bin/qrenderdoc.app/Contents/MacOS/qrenderdoc --unittest log=test.log; then
          echo "::error::$(cat test.log)" | tr '\n' '\001' | sed -e $'s#\x01#%0A#g';
          exit 1;
        fi
    - if: matrix.type == 'Release' && github.event_name == 'push'
      name: Preparing for deploy
      run: ./util/buildscripts/scripts/prepare_deps_macos.sh ./build/bin/qrenderdoc.app/Contents/MacOS/qrenderdoc
    - if: matrix.type == 'Release' && github.event_name == 'push'
      name: Codesign app bundle
      # Extract the secrets we defined earlier as environment variables
      env: 
        MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
        MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
        MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
      run: |
        # Turn our base64-encoded certificate back to a regular .p12 file
        
        echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
    
        # We need to create a new keychain, otherwise using the certificate will prompt
        # with a UI dialog asking for the certificate password, which we can't
        # use in a headless CI environment
        
        security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain 
        security default-keychain -s build.keychain
        security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
        security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain
    
        # We finally codesign our app bundle, specifying the Hardened runtime option
        
        /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime ./build/lib/librenderdoc.dylib -v
        /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime ./build/lib/renderdoc.so -v
  
    
    - if: matrix.type == 'Release' && github.event_name == 'push'
      name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
          # Artifact name
        name: MacOS build library
          # A file, directory or wildcard pattern that describes what to upload
        path: ./build/*
        retention-days: 90
    
        
